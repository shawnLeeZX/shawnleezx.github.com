<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Eclim | SHAWN LEE]]></title>
  <link href="http://shawnLeeZX.github.io/blog/categories/eclim/atom.xml" rel="self"/>
  <link href="http://shawnLeeZX.github.io/"/>
  <updated>2015-07-02T15:02:39+08:00</updated>
  <id>http://shawnLeeZX.github.io/</id>
  <author>
    <name><![CDATA[Shawn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Note -- Code Java Under Vim]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2013/10/03/note-code-java-under-vim/"/>
    <updated>2013-10-03T10:06:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2013/10/03/note-code-java-under-vim</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>I am becoming a die-hard vimer…</p>

<p>This post will talk about how to establish a powerful Java IDE using
vim.</p>

<!-- more -->

<h2 id="ant">Ant</h2>

<p>If you want to write java code in pure command line. Ant is the
makefile for java.</p>

<p>Note: Now the <code>build.xml</code> I wrote will rebuild depends everytime,
which is no efficienty, and I found solutions
<a href="http://stackoverflow.com/questions/2163739/is-there-a-way-to-guarantee-that-an-ant-dependency-is-run-only-once">here</a>,
and
<a href="http://stackoverflow.com/questions/1861569/avoiding-re-building-prerequisites-in-ant">here</a>.
But they are not very satisfactory.</p>

<h3 id="usage">Usage</h3>
<p>Here is a quick start ant tutorial:
<a href="http://ant.apache.org/manual/tutorial-HelloWorldWithAnt.html">Tutorial: Hello World with Apache Ant</a>.</p>

<p>You can find ant download
<a href="http://ant.apache.org/bindownload.cgi">here</a>.</p>

<p>For more information, there is one book called <em>Ant: the Definitive
Guide</em>.</p>

<h4 id="one-note-about-arg-tag">One note about <code>arg</code> tag</h4>

<p>The documentation of ant sometimes is not very clear, for example:</p>

<p>If one argument takes one parameter, you cannot put them in one <code>arg</code>
tag. The following code will not work, because ant takes <code>-docs</code> and
<code>src</code> as separate argument.</p>

<p><code>xml
        &lt;java jar="${jar.dir}/${ant.project.name}.jar" fork="true"&gt;
            &lt;arg value="-docs src"/&gt;
        &lt;/java&gt;
</code></p>

<p>You have to do it this way:</p>

<p>It should be written as following:</p>

<p><code>xml
        &lt;java jar="${jar.dir}/${ant.project.name}.jar" fork="true"&gt;
            &lt;arg value="-docs"/&gt;
            &lt;arg value="src"/&gt;
        &lt;/java&gt;
</code></p>

<h3 id="jar-package">Jar Package</h3>

<p>It happens that you need to add external jar libraries in your jar to
make it executable. More details reason about doing this you can read
<a href="http://docs.oracle.com/javase/tutorial/deployment/jar/downman.html">this post</a>.</p>

<p>A long time ago, when I first wrote Java program using Eclipse, just
by clicking generate executable jar file, I could get the executable
jar file, which is very neat – only contains what is needed in my
program.</p>

<p>This time, when I decided to do it the hard way, I actually found it
is not a dummy task. And the way provided below does not do as a good
job as Eclipse, which will put the whole external jar files in the
executable jar file.</p>

<p>This task is accomplished via one-jar. You can download it
<a href="http://one-jar.sourceforge.net/">here</a>.</p>

<p>There are several ways to use the software. But if you want to write
your own ant <code>build.xml</code>, the most approriate way is to use the <em>Ant
Taskdef</em> way.</p>

<p><a href="http://one-jar.sourceforge.net/index.php?page=getting-started&amp;file=ant">Here</a>
is the official quick start.</p>

<p>However, it is not very instructive…it takes me really some time to
get one-jar work.</p>

<p>So, here is an example:</p>

<p>```xml
<project name="HSearchEngine" basedir="." default="main">
    <property name="one-jar.dist.dir" value="/home/hhiker/mine/software/one-jar-ant/"></property>
    <import file="${one-jar.dist.dir}/one-jar-ant-task.xml" optional="true"></import></project></p>

<pre><code>&lt;property name="src.dir"        value="src"/&gt;

&lt;property name="build.dir"      value="build"/&gt;
&lt;property name="classes.dir"    value="${build.dir}/classes"/&gt;
&lt;property name="jar.dir"        value="${build.dir}/jar"/&gt;

&lt;property name="jars.dir"        value="./jars"/&gt;

&lt;property name="main-class"     value="IndexFiles"/&gt;

&lt;path id="classpath"&gt;
            &lt;fileset dir="${jars.dir}"/&gt;
&lt;/path&gt;

&lt;target name="clean"&gt;
    &lt;delete dir="${build.dir}"/&gt;
&lt;/target&gt;

&lt;target name="init"&gt;
    &lt;mkdir dir="${classes.dir}"/&gt;
    &lt;mkdir dir="${jar.dir}"/&gt;
&lt;/target&gt;

&lt;target name="compile" depends="init"&gt;
    &lt;javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath"/&gt;
&lt;/target&gt;

&lt;target name="jar" depends="compile"&gt;
    &lt;one-jar destfile="${jar.dir}/${ant.project.name}.jar" onejarmainclass="${main-class}"&gt;
        &lt;manifest&gt;
            &lt;attribute name="Main-Class" value="${main-class}"/&gt;
        &lt;/manifest&gt;
        &lt;main&gt;
            &lt;fileset dir="${classes.dir}"/&gt;
        &lt;/main&gt;
        &lt;lib&gt;
            &lt;fileset dir="${jars.dir}"/&gt;
        &lt;/lib&gt;
    &lt;/one-jar&gt;
&lt;/target&gt;

&lt;target name="run" depends="jar"&gt;
    &lt;java jar="${jar.dir}/${ant.project.name}.jar" fork="true"&gt;
        &lt;arg value="-docs"/&gt;
        &lt;arg value="src"/&gt;
    &lt;/java&gt;
&lt;/target&gt;

&lt;target name="clean-build" depends="clean, jar"/&gt;

&lt;target name="main" depends="clean, run"/&gt;
</code></pre>
<p>&lt;/project&gt;
```</p>

<p>The main thing changed because of one-jar is:</p>

<h4 id="add-some-lines">Add Some Lines</h4>

<p>Add the following line in your ant build file.</p>

<p><code>xml
    &lt;property name="one-jar.dist.dir" value="/home/hhiker/mine/software/one-jar-ant/"/&gt;
    &lt;import file="${one-jar.dist.dir}/one-jar-ant-task.xml" optional="true"/&gt;
</code></p>

<p>In one-jar-ant-task.xml, it defines a new task called one-jar, which
is used by user, meaing us.</p>

<p>Note: one-jar-ant-task-${one-jar.version}.jar and files extracted from
it must be in the same directory, which is one-jar.dist.dir above.</p>

<h4 id="one-jar-usage">one-jar Usage</h4>

<p>Basic usage of one-jar is:</p>

<p><code>xml
        &lt;one-jar destfile="${jar.dir}/${ant.project.name}.jar" onejarmainclass="${main-class}"&gt;
            &lt;manifest&gt;
                &lt;attribute name="Main-Class" value="${main-class}"/&gt;
            &lt;/manifest&gt;
            &lt;main&gt;
                &lt;fileset dir="${classes.dir}"/&gt;
            &lt;/main&gt;
            &lt;lib&gt;
                &lt;fileset dir="${jars.dir}"/&gt;
            &lt;/lib&gt;
        &lt;/one-jar&gt;
</code></p>

<p>Note: </p>

<ul>
  <li>by experimenting, <code>lib</code> tag of one-jar can only contain <code>fileset</code> tag.</li>
  <li>If <code>manifest</code> is omitted, one-jar will generate one automatically.</li>
</ul>

<p>The outline of one-jar task is showed below(from
<a href="http://one-jar.sourceforge.net/index.php?page=build-tools&amp;file=ant">here</a>).</p>

<p><code>xml
    &lt;one-jar destfile=... manifest=...&gt;
        &lt;manifest&gt;
            Attributes for the manifest of the One-JAR.  Use this instead of
            specifying a "manifest" attribute above
            &lt;attribute name="attr" value="value"&gt;
            ... etc.
        &lt;/manifest&gt;
    	&lt;main [jar="main.jar"]&gt;
    		&lt;filesets&gt; which comprise the class-files of the main application.  
    		Do not put JAR files in here; rather use the "jar" attribute if you already have a 
    		pre-canned main program.
    	&lt;/main&gt;
    	&lt;lib&gt;
    		&lt;filesets&gt; containing Jar-files which support the main application.
    	&lt;/lib&gt;
    	&lt;binlib&gt;
    		&lt;filesets&gt; containing native libraries.  Native libraries are expanded into a 
    		temporary directory at runtime: these files are deleted on exit.
    	&lt;/binlib&gt;
    	&lt;wrap&gt;
    		&lt;filesets&gt; containing class-loader wrappers.  These check classloaders 
    		that are loaded from the supporting Jar files to make sure they are compatible 
    		with the One-JAR classloader. This is a complex subject, contact one-jar-support for
    		more information and consulting services if you need to wrap a classloader.
    		You will know you need this if your application does not load classes when
    		you expect it should, from JAR files inside the &lt;lib&gt; directory.
    	&lt;/wrap&gt;
    	&lt;fileset&gt;
    		Any other stuff you want in the top-level One-JAR file.  Remember though, any
    		.class files you put in here will not be able to "see into" JAR files loaded
    		from /main and /lib because their classloader will be the top-level Java 
    		Application Loader, which does not understand One-JAR files (this is how One-JAR 
    		came about in the first place). Contact one-jar support if you find 
    		yourself having problems with this kind of issue.
    	&lt;/fileset&gt;
    &lt;/one-jar&gt;
</code></p>

<h3 id="auto-complete-tags">Auto complete tags</h3>

<p>To write build.xml quicker, you can use a vim plugin called PairTools – search
it on <a href="www.vim.org">vim.org</a>.</p>

<p>Add the following config for ant type file.</p>

<p><code>bash
" File auto-generated by PairTools 1.5.2
" Enable modules
let g:pairtools_ant_pairclamp = 1
let g:pairtools_ant_tagwrench = 1
let g:pairtools_ant_jigsaw = 1
" Configure PairClamp
let g:pairtools_ant_autoclose = 1
let g:pairtools_ant_forcepairs = 0
let g:pairtools_ant_closepairs = "(:),[:],{:},\":\""
let g:pairtools_ant_smartclose = 1
let g:pairtools_ant_smartcloserules = '\w'
let g:pairtools_ant_apostrophe = 0
let g:pairtools_ant_antimagic = 1
let g:pairtools_ant_antimagicfield = "Comment,String"
let g:pairtools_ant_pcexpander = 0
let g:pairtools_ant_pceraser = 1
" Configure TagWrench
let g:pairtools_ant_tagwrenchhook = 'tagwrench#BuiltinBasicTagHook'
let g:pairtools_ant_twexpander = 1
let g:pairtools_ant_tweraser = 1
</code></p>

<p>One thing needs attention is this line:</p>

<p><code>bash
let g:pairtools_ant_tagwrenchhook = 'tagwrench#BuiltinBasicTagHook'
</code>
This line tells PairTools to use BuiltinBasicTagHook for ant tags.</p>

<p>BuiltinBasicTagHook is a basic tag builder that automatically add an
ending tag when the starting tag does not end with /&gt;, i.e. it ends
with a single &gt;. Also, tags starting with a bang (!) or slash (/)
never generate closing tags.</p>

<h3 id="syntax-highlighting">Syntax highlighting</h3>
<p>I do not write xml code frequently, thus I add the following line to
make all xml files to be viewed as ant files.</p>

<p><code>bash
au BufNewFile,BufRead *.xml set filetype=ant
</code></p>

<p>I have tried the following code, but it does not work. Guess it is overrided.</p>

<p><code>bash
au BufNewFile,BufRead *.xml setf ant
</code>
## Eclim</p>

<h3 id="compile">Compile</h3>

<p>Eclim provides the following command to let you call the build.xml written:</p>

<p><code>bash
:Ant [&lt;target&gt; ...]
</code></p>

<p>which performs the following steps:</p>

<ol>
  <li>Saves any previous ‘makeprg’ and ‘errorformat’ option settings so
that you can define your own settings for the :make command.</li>
  <li>Sets ‘makeprg’ to execute ant with the -find option so that it will
search for your build.xml file in the current directory or in a
parent directory.</li>
  <li>Sets ‘errorformat’ to recognize the following errors:
    <ol>
      <li>javac errors.</li>
      <li>javadoc errors.</li>
      <li>jasper jsp compilattion errors.</li>
      <li>junit errors / failures.</li>
      <li>cactus errors / failures.</li>
    </ol>
  </li>
  <li>Executes :make.</li>
  <li>Restores your previous ‘makeprg’ and ‘errorformat’ option settings.</li>
</ol>

<h3 id="auto-completion--import">auto-completion &amp; import</h3>

<p>It is really a painful journey to find a standalone java code completion plugin,
which failed. The eclim is the final solution. So is automatically adding import
statement.</p>

<h2 id="tags--jump">tags &amp; jump</h2>

<p>Use ctags to jump around the code. This statement will generate tags for Java.</p>

<p><code>bash
ctags -R --language-force=java
</code></p>

<p>Added the tag generated in your java config file:</p>

<p><code>bash
set tags+=JAVA_TAG
</code></p>

<p>Then everytime you write a java program, those tag will work.</p>

<p>This command will show language ctags supports.</p>

<p><code>bash
ctags --list-kinds=java
</code></p>

<p>I still have one question here:</p>

<p>what does pri field mean when using ctags? such as FS.</p>

<h2 id="lookup-javadoc-in-vim">Lookup javadoc in vim.</h2>

<p>You can generate txt doc for Java SDK with vim helptags. The method is here:
<a href="http://vimdoclet.sourceforge.net/">vimdoclet</a>.</p>

<p>Note:</p>

<ul>
  <li>duplicate names must add package to distinguish them.</li>
  <li>create a lib directory after extracting vimdoclet-VERSION.tgz,
otherwise it won’t work.</li>
</ul>

<p>This will generate txt format doc in ./tmp folder. Put docs generated
in ~/.vim/doc or if you are using vim plugin manager, take pathegon as
an example, create a folder named java_doc under bundle, make a folder
named doc, then put doc generated under this folder, which is more
manageable.</p>

<p><code>bash
ant -f run.xml run -Dvimdoclet.source.root=/home/hhiker/mine/software/jdk1.7.0_40/share/ -Dvimdoclet.outputDir tmp
</code></p>

<p>Generate helptags:</p>

<p><code>bash
:helptags ~/.vim/bundle/java_doc/doc
</code></p>

<p>Note: Although eclim provides javadoc preview feature as well, after
some usage, I found this one better.</p>

<p>TODO: I do not know how to generate help files for source files other than JDK’s now.</p>

<h2 id="syntax-checking-on-the-fly">Syntax checking on the fly</h2>

<p>Ok, this is a bonus. Just minutes ago, I found my syntax checking
plugin for vim mysteriously gone(explanation later). I have to readd
it.</p>

<p><a href="https://github.com/scrooloose/syntastic">Syntastic</a> provides syntax
checking on the fly(by default it is the time when you save files)</p>

<p>Add the following lines to make Syntastic more useful:</p>

<p><code>bash
" For ~/.vim/bundle/syntastic/
" ======================================================
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" ======================================================
</code></p>

<p>Type :Errors in vim to get a location list of errors.</p>

<h3 id="why-plugins-mysteriously-disappear">Why plugins mysteriously disappear?</h3>
<p>At the first time I added them, I used git clone, which would leave a
git repo in the folder, however, when this happens, the main repo will
not take files under those folder into consideration.</p>

<p>At the time I cloned my plugins on my new laptop, they were just empty
folders…</p>

<p>The proper way to avoid this is to remove the git repo of plugins. But what if this
already happened? Remove and readd them.</p>

<p><code>bash
git rm --cached -rf PLUGIN_FOLDER_NAME
git add PLUGIN_FOLDER_NAME
</code></p>

<h2 id="conclusion">Conclusion</h2>

<p>It took me days to get this done. Hope it helps.</p>
]]></content>
  </entry>
  
</feed>
