<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | SHAWN LEE]]></title>
  <link href="http://shawnLeeZX.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://shawnLeeZX.github.io/"/>
  <updated>2016-02-16T22:21:15+08:00</updated>
  <id>http://shawnLeeZX.github.io/</id>
  <author>
    <name><![CDATA[Shawn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Note on Running Tensorflow in Anaconda]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2016/01/09/note-on-running-tensorflow-in-anaconda/"/>
    <updated>2016-01-09T19:25:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2016/01/09/note-on-running-tensorflow-in-anaconda</id>
    <content type="html"><![CDATA[<p>Due to conflict of protobuf version, I have to run tensorflow in a sandbox
environment, aka anaconda. This is the note to note down some of its tricky
parts I spent some time figuring out.</p>

<!-- more -->

<p>Most of the packages are backward compatible, so normal packages could be
installed on servers normally, by <a href="http://www.ansible">Ansible</a>. But if
Caffe(it seems the newest Caffe upgraded to protobuf3) and tensorflow want to
be installed in the same machine, protobuf2 and protobuf3 have to co-exist. Due
to their
<a href="https://www.tensorflow.org/versions/master/get_started/os_setup.html#mac-os-x-typeerror-init-got-an-unexpected-keyword-argument-syntax">conflict</a>,
they cannot co-exist. So to not break others environment, I have to install
tensorflow in anaconda.</p>

<p>There are two things I think I may need in the future:</p>

<ol>
  <li>To install Anaconda and all consequent python packages in it using Ansible.</li>
  <li>A bug either in pip or in conda that needs some workaround.</li>
</ol>

<h2 id="using-ansible-with-anaconda">Using Ansible with Anaconda</h2>

<p>Conda has a <a href="http://conda.pydata.org/docs/help/silent.html">silent mode</a>, so it
could be install using shell script, which could be achieved using the <code>shell</code>
module in Ansible.</p>

<p>To install consequent packages all in Anaconda environment, we could write a
playbook that has the location of <code>pip</code> as a variable, so by passing different
<code>pip</code> binary, we could install the python packages wherever we want.</p>

<h2 id="solve-cannot-remove-entries-from-nonexistent-file--easy-installpth">Solve ``Cannot remove entries from nonexistent file: … easy-install.pth’’</h2>

<p>There is a bug preventing one upgrading packages in Anaconda. Where this bug
belongs to pip/setuptools or conda seems still in
<a href="https://github.com/pypa/pip/issues/2751">consideration</a>.</p>

<p>The workaround I used, one of the workarounds suggested by the above link,
which I think is the simplest one is to add <code>--ignore-installed</code> option to
<code>pip</code>.</p>

<p>If your packages in contained in <code>conda</code>’s collection, the best solution is to
install it there. For instance, for <code>numpy</code>, it is just better to install by</p>

<p><code>bash
conda update numpy
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On IDEs of Python in Emacs]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/08/05/on-ides-of-python-in-emacs/"/>
    <updated>2015-08-05T10:30:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/08/05/on-ides-of-python-in-emacs</id>
    <content type="html"><![CDATA[<p>I was finally annoyed enough to find a replacement of <code>auto-complete</code> in
Emacs. Reasons will be noted down later. In this note, three common extensions
for writing Python under Emacs will be compared and noted, which are:</p>

<ol>
  <li><a href="https://github.com/tkf/emacs-jedi">jedi</a></li>
  <li><a href="https://github.com/jorgenschaefer/elpy">elpy</a></li>
  <li><a href="https://github.com/proofit404/anaconda-mode">anaconda</a></li>
</ol>

<!-- more -->

<p>I always used emacs-jedi since I made the shift from Vim to Emacs.</p>

<p>The functionality provided by emacs-jedi is actually quite good. The only function
that lacks is the one to refactor. So it is not the fault of emacs-jedi that makes me
want to change extensions. However, the detail will be left to the comparison
between <code>company-mode</code> and <code>auto-complete</code>.</p>

<p>Though emacs-jedi is not bad, it is also not that good compared with elpy, in my
opinion.</p>

<p>You could get good code completion, etc, basically everything roughly equal in
those three extensions. There are some details about elpy that makes me prefer
to elpy.</p>

<p>At the time that I set up emacs-jedi, basically I copied some the author’s hacking
code to let emacs-jedi recognize my current python files, or project
automatically. It works, but it does not feel elegant.</p>

<p>I could get by with that if it is not due to the reason of <code>auto-complete</code>.</p>

<p>With elpy, you could use command <code>elpy-set-project-root</code> to tell elpy that you
need current project to be taken into account, which does not feel
automatically but it is more user friendly and elegant.</p>

<p>What’s more, elpy takes into account the <code>PYTHON_PATH</code> environment variable
into account automatically. I guess emacs-jedi does this as well.</p>

<p>As for anaconda, actually I found it prior to elpy and also gave it a
try. However, it failed when I tried to get code completion on-the-fly in my
current project and no documentation seems to hint me how to deal with that.</p>

<p>Lastly, the refactoring function provided by elpy seems exciting so that I
won’t need to use <code>search-and-replace</code> or <code>multi-occur</code> stuff. But I did not
try it yet. Look forward to.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Notes on IPython Startup Script]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/08/03/some-notes-on-ipython-startup-script/"/>
    <updated>2015-08-03T16:22:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/08/03/some-notes-on-ipython-startup-script</id>
    <content type="html"><![CDATA[<p>This post is going to note down how to let ipython automatically reload a
module after changing the module and how to run magic function from python
start-up scripts.</p>

<!-- more -->

<p>ipython will not reload any modules if you have changed some module under given
that ipython want to keep the interactive session so all your data during the
session is going to be kept. To overcome this situation while you are writing
some module or library code, the <code>autoload</code> magic function could be used.</p>

<p>```python
%load_ext autoreload</p>

<p>%autoreload 2
```</p>

<p>```bash
%autoreload
Reload all modules (except those excluded by %aimport) automatically now.</p>

<p>%autoreload 0
Disable automatic reloading.</p>

<p>%autoreload 1
Reload all modules imported with %aimport every time before executing the Python code typed.</p>

<p>%autoreload 2
Reload all modules (except those excluded by %aimport) every time before executing the Python code typed.</p>

<p>%aimport
List modules which are to be automatically imported or not to be imported.</p>

<p>%aimport foo
Import module ‘foo’ and mark it to be autoreloaded for %autoreload 1</p>

<p>%aimport -foo
Mark module ‘foo’ to not be autoreloaded.
```</p>

<p>For more details, refer to ipython’s
<a href="http://ipython.org/ipython-doc/dev/config/extensions/autoreload.html">documentation</a>.</p>

<p>To avoid typing those magic function again and again, they could be put in the
ipython startup script(Name it with <code>.py</code> suffix under
<code>.ipython/profile_default/startup</code>. All python scripts under that folder will
be loaded according to lexical order), which looks like the following:</p>

<p>```python
from IPython import get_ipython
ipython = get_ipython()</p>

<p>ipython.magic(“pylab”)
ipython.magic(“load_ext autoreload”)
ipython.magic(“autoreload 2”)
```</p>
]]></content>
  </entry>
  
</feed>
