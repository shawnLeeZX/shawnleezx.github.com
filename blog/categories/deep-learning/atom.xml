<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Deep_Learning | SHAWN LEE]]></title>
  <link href="http://shawnLeeZX.github.io/blog/categories/deep-learning/atom.xml" rel="self"/>
  <link href="http://shawnLeeZX.github.io/"/>
  <updated>2015-08-11T11:37:43+08:00</updated>
  <id>http://shawnLeeZX.github.io/</id>
  <author>
    <name><![CDATA[Shawn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Frameworks of Deep Learning]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/08/01/on-frameworks-of-deep-learning/"/>
    <updated>2015-08-01T14:30:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/08/01/on-frameworks-of-deep-learning</id>
    <content type="html"><![CDATA[<p>I have spent the last two days trying to figure out what do use as a solid base
for further experiments on deep learning. I decided to settle down to Keras for
the time being. But given that it may not be the optimal choice, I want to note
down what I have tried so that it would be easier to pick up in the future.</p>

<!-- more -->

<p>At first, our lab members are using Caffe, which I have spent some effort
learning it. However, as I got to know more in this field, combining with my
background in Computer Science, Caffe is not really the best platform to do
experiments, at least not for the people who want to understand and experiment
on all the details of various neural network elements and added another layer
of unnecessary engineering burden to the experiments.</p>

<p>Starting from the motivation to actually code NN from scratch, a language as
low level as C++ is not the right choice. Maybe at the time that I am really
equipped and really need large scale experiments, I will get back to Caffe.</p>

<p>Then I came to try Torch. At first I held high expectation given that:</p>

<ol>
  <li>The easy binding between Lua and C.</li>
  <li>The API of torch is rather clean and most of the non-computational intensive
are actually written in Lua, which would save a ton of time.</li>
  <li>The <code>image</code> package of Torch is great given the experience to do
visualization under Python.</li>
  <li>Lua is not a barrier to me, given that I learn a new language rather fast.</li>
</ol>

<p>Then I spent some time to learn the code organization of Torch. Basically,
Torch is a combination of <a href="http://luajit.org/">LuaJIT</a> with Lua packages and C
Libraries. It uses CMake to compile the project. So far so good.</p>

<p>But the real problem comes when I tried to find out a reasonable environment to
write Lua code. SURPRISINGLY, both Emacs and Vim does not have a work
environment for Lua. Emacs does not even have a usage syntax highlighting
for Lua. As for Vim, it does have a usage syntax highlighting, but it stops at
that. All other packages:</p>

<ul>
  <li><a href="http://www.vim.org/scripts/script.php?script_id=3169">luainspect.vim</a>:
Semantic highlighting for Lua in Vim</li>
  <li><a href="http://www.vim.org/scripts/script.php?script_id=4950">Lua Support 2</a> : Lua
IDE. Insert codesnippets, run, compile, and check the code and look up help.</li>
  <li><a href="http://www.vim.org/scripts/script.php?script_id=3625">lua.vim</a> : Lua file
type plug-in for the Vim text editor</li>
  <li><a href="http://www.vim.org/scripts/script.php?script_id=3331">lua_omni</a> : omni
completion for Lua plus few extras</li>
</ul>

<p>are buggy in some extent and I really do not have time to fix them.</p>

<p>Then I tried to find some IDE recommended by the Torch documentation. There are
Eclipse with LDT, zbs-torch and some others, which all sucks. Maybe I have been
using Emacs and Vim for too long…</p>

<p>After about one day’s struggling with all different IDEs, I decided to try new
frameworks based on Theano, even they are all in their infancy.</p>

<p><a href="https://blocks.readthedocs.org/en/latest/">Pylearn2</a> and
<a href="https://blocks.readthedocs.org/en/latest/">Blocks &amp; Fuel</a> feels a bit
convoluted in design. Opendeep, Lasagne, Keras look alike. Given Keras offers
to enforce constraints on parameters, I decided to try Keras first.</p>
]]></content>
  </entry>
  
</feed>
