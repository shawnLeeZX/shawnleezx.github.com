<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cscope | SHAWN LEE]]></title>
  <link href="http://shawnLeeZX.github.io/blog/categories/cscope/atom.xml" rel="self"/>
  <link href="http://shawnLeeZX.github.io/"/>
  <updated>2015-07-02T17:29:00+08:00</updated>
  <id>http://shawnLeeZX.github.io/</id>
  <author>
    <name><![CDATA[Shawn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cscope's Understanding of Definition]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2013/09/24/cscopes-understanding-of-definition/"/>
    <updated>2013-09-24T10:16:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2013/09/24/cscopes-understanding-of-definition</id>
    <content type="html"><![CDATA[<p>Today I am reading source code of LWIP(Light Weight Internet Protocol) using
cscope. In the process, I happened to want to read some definition of system
variables and function. So I try cscope to jump to them. But cscope tell me:</p>

<blockquote>
  <p>no matches found or cscope query g printf of printf</p>
</blockquote>

<!-- more -->

<p>At the beginning, I guess the system include files are not included, though I
have read the manual previously and it tells the system include files are
automatically included.</p>

<p>So I manually added them when building cscope database.</p>

<p>{% codeblock lang:bash %}
cscope -I/usr/include -bR 
{% endcodeblock %}</p>

<p>And I tried search printf in the code snippets below:</p>

<p>{% codeblock lang:c %}
#include <stdio.h></stdio.h></p>

<p>int main (int argc, char const* argv[])
{
    printf(“Hello World\n”);
    return 0;
}
{% endcodeblock %}</p>

<p>The same results.</p>

<p>Then I guess cscope does not regard extern definition as definition, since
almost all
system functions are in binary form in dynamic library – their declaration are
markded as <code>extern</code>.</p>

<p>So I took the following expriment:</p>

<p>{% codeblock lang:c %}
#include <stdio.h></stdio.h></p>

<p>extern int i;</p>

<p>int j;</p>

<p>int main (int argc, char const* argv[])
{
    printf(“Hello World %d\n”, i, j);
    return 0;
}
{% endcodeblock %}</p>

<p>After building the cscope database, cscope could find definition of variable j,
but not i. This verified my guess.</p>

<p>In conclusion, maybe an easier way is just to read APUE. Tell me if there is a
better way. I will be in great gratitude.</p>
]]></content>
  </entry>
  
</feed>
