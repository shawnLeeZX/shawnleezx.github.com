<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CS | SHAWN LEE]]></title>
  <link href="http://shawnLeeZX.github.io/blog/categories/cs/atom.xml" rel="self"/>
  <link href="http://shawnLeeZX.github.io/"/>
  <updated>2015-08-01T14:17:25+08:00</updated>
  <id>http://shawnLeeZX.github.io/</id>
  <author>
    <name><![CDATA[Shawn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Add Text to Scanned Pdf Without Text]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/07/14/how-to-add-text-to-scanned-pdf-without-text/"/>
    <updated>2015-07-14T10:43:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/07/14/how-to-add-text-to-scanned-pdf-without-text</id>
    <content type="html"><![CDATA[<p>I am reading some paper that is decades ago so no pdf file with text could
found, so I looked up to some solution. Here it is.</p>

<!-- more -->

<p><a href="https://github.com/gkovacs/pdfocr">Pdfocr</a> is a ruby script that integrates
open source tools to add text layer to pdf files.</p>

<p>To be able to use it, there are some dependence needed, just as shell scripts.</p>

<p><code>bash
sudo apt-get install pdftk
sudo apt-get install tesseract-ocr tesseract-ocr-eng exactimage
</code></p>

<p>You can infer what those programs are used for based what the author
<a href="http://ubuntuforums.org/showthread.php?t=1456756">said</a> below.</p>

<blockquote>
  <p>pdfocr was written by me (Geza Kovacs). It is simply a script which automates
the following process:</p>

  <ol>
    <li>Splitting the PDF file into separate pages using pdftk</li>
    <li>Extracting out the image data using pdfimages</li>
    <li>Doing OCR (optical character recognition) using cuneiform</li>
    <li>Embedding the detected text back into the PDF file using hocr2pdf</li>
    <li>Merging together the files using pdftk.</li>
  </ol>
</blockquote>

<p>Lastly, clone the ruby code.</p>

<p><code>bash
git clone https://github.com/gkovacs/pdfocr
</code></p>

<p>Then enjoy.</p>

<p><code>bash
pdfocr.rb -i foo.pdf -o out.pdf
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zoom In and Out Gnome Using Mouse]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/07/02/zoom-in-and-out-gnome-using-mouse/"/>
    <updated>2015-07-02T17:18:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/07/02/zoom-in-and-out-gnome-using-mouse</id>
    <content type="html"><![CDATA[<p>Just tried to find a solution to zoom in and out in the GNOME desktop, so that
things could be seen better in case they are too small during presentation.</p>

<!-- more -->

<p>The solution a program called <code>mousewheelzoom</code>, whose source is held at github:
<a href="https://github.com/tobiasquinn/gnome-shell-mousewheel-zoom">gnome-shell-mousewheel-zoom</a>.</p>

<p>The installation instructions could be found there.</p>

<hr />

<p>Besides the solution that works, two solutions that did not work are also going
to noted below.</p>

<h3 id="compiz-setting">Compiz Setting</h3>

<p>At first I tried to changing setting in Compizconfig Settingsmanager, as
suggested in the
<a href="http://askubuntu.com/questions/82398/how-to-zoom-inzoom-out">link</a>. It turns
out that compiz is used by Unity, not GNOME. Since I have changed the desktop
environment, it does not obviously.</p>

<h3 id="gnome-native-solution">GNOME Native solution</h3>

<p>Then GNOME also offers such function directly in their <em>Universal Access</em>,
under <em>Seeing</em> tab, in category Zoom — just type Universal Access in the
Dock. However, it does not work either.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Convert Djvu File to PDF with Text Kept]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/03/27/how-to-convert-djvu-file-to-pdf-with-text-kept/"/>
    <updated>2015-03-27T20:47:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/03/27/how-to-convert-djvu-file-to-pdf-with-text-kept</id>
    <content type="html"><![CDATA[<p>Finally, I have come up with a solution to convert Djvu format e-book to Pdf
format. This post is going to note down exactly HOW.</p>

<p>First, some background about why I am doing this.</p>

<p>In the ancient time, well-know scholars are proud of their collection of books
in their personal library, which is the physical incarnation of their knowledge
and journey of learning. Although still a majority of people prefers the old
way of reading paper books, the way to keep one’s collection of books is going
to change to the electronic format way eventually. There are three significant
benefits of doing this:</p>

<ol>
  <li>You are able to bring with you all your books anywhere without any extra
effort.</li>
  <li>E-books are searchable, which speed up your reading a lot.</li>
  <li>You can open multiple copies of your book at the same time so the cross
reference is much more easier than reading paper version.</li>
</ol>

<p>But one major drawback of the past years where I almost read e-books
exclusively is that at the time when I can only find djvu format of certain
files, I have no way to highlight text on the e-book, especially for Math
books, a lot of which are in djvu format.</p>

<p>After meeting with one file that I must take note, I decide to figure out a
solution. So here it is.</p>

<!-- more -->

<p>Basically, the mechanism works like this. We extract image and text from the
original djvu files separately. Then we create the wanted pdf with them.</p>

<p>The solution is a combination of several open source tools:</p>

<ol>
  <li><a href="http://jwilk.net/software/ocrodjvu">djvu2hocr</a>. It is a wrapper for OCR
systems, that allows you to perform OCR on DjVu files. Optical character
recognition (OCR) is the mechanical or electronic conversion of images of
typewritten or printed text into machine-encoded text.</li>
  <li><a href="http://djvu.sourceforge.net/">ddjvu</a>. We use it to decode image from djvu
file. It is part of the open source project DjVuLibre that offers program to
manipulate djvu files. But one of the most pity is that no program it offers
could add highlight and annotations to djvu in a GUI way. I think this is
one of the major reasons djvu cannot catch on besides some other big
reasons.</li>
  <li><a href="https://rubygems.org/gems/pdfbeads">pdfbeads</a>. PDFBeads is a small utility
written in Ruby which takes scanned page images and converts them into a
single PDF file.</li>
  <li><a href="http://www.ghostscript.com/">gs</a> PostScript and PDF language interpreter
and previewer. If you are using a modern UNIX environment, it is highly
possible you would have it installed by default. We need this when deal with
djvu books, since pdfbeads creates very large intermediate files which makes
converting large books infeasible. So we need to create pdf pages one by one
and use gs to merge them.</li>
</ol>

<h2 id="installation">INSTALLATION</h2>

<p>Only installation on Ubuntu is going to be described.</p>

<h3 id="ocrodjvu">ocrodjvu</h3>

<p><code>djvu2hocr</code> and <code>ddjvu</code> are from <code>ocrodjvu</code>.</p>

<p>ocrodjvu is in the official repository, so just type in:</p>

<p><code>bash
sudo apt-get install ocrodjvu
</code></p>

<h3 id="pdfbeads">pdfbeads</h3>

<p><code>pdfbeads</code> is written in ruby. The package manager <code>gem</code> of ruby will handle
dependency in ruby but there are some addition library header needed to be
installed depending on your operating system. As for me, <code>libleptonica-dev</code> is
needed. Type in:</p>

<p><code>bash
sudo apt-get install libleptonica-dev
</code></p>

<blockquote>
  <p><a href="http://www.leptonica.com/">Leptonica</a> is a pedagogically-oriented open
source site containing software that is broadly useful for image processing
and image analysis applications.</p>
</blockquote>

<p>If you have not done a lot image manipulation, it is highly probable that you
also need to install <code>libmagickwand-dev</code>:</p>

<p><code>bash
sudo apt-get install libmagickwand-dev
</code></p>

<p>It mainly installs development package for ImageMagick. From its websites,
it is a:</p>

<blockquote>
  <p><a href="http://www.leptonica.com/">ImageMagick</a>® is a software suite to create,
edit, compose, or convert bitmap images. It can read and write images in a
variety of formats (over 200) including PNG, JPEG, JPEG-2000, GIF, TIFF, DPX,
EXR, WebP, Postscript, PDF, and SVG. Use ImageMagick to resize, flip, mirror,
rotate, distort, shear and transform images, adjust image colors, apply
various special effects, or draw text, lines, polygons, ellipses and Bézier
curves.</p>
</blockquote>

<p>And to ensure we are getting a reasonable size of pdf finally, we need to
use <a href="http://jbig2.com/">JBIG2</a> compression instead of TIFF G4 when creating
pdf. JBIG2 is an International Telecommunication Union format that represents a
revolutionary breakthrough in captured document technology. Using JBIG2
encoding, a scanned image can be compressed up to 10x smaller than with TIFF
G4.</p>

<p>This time we need to compile it from
<a href="https://github.com/agl/jbig2enc">source</a>. Standard pipe is good:</p>

<p><code>bash
./autogen.sh
./configure
make
make install (or sudo make install)
</code></p>

<p>I have done a simple test on how much more compress JBIG2 could offer. Using
TIFF G4, one random chosen page of my djvu file will be 77K, while it is 21K
using JBIG2. Considering that the final output size of my pdf file is 49M, it
would beyond 100M if I used TIFF G4, which is too big for a pdf book.</p>

<p>With all prerequisite ready, we could install pdfbeads now:</p>

<p><code>bash
sudo gem install pdfbeads
</code></p>

<h3 id="gs">gs</h3>

<p><code>gs</code> should be available already on Ubuntu.</p>

<h2 id="usage">Usage</h2>

<p>Basic usage for small file could be found on
<a href="http://askubuntu.com/questions/46233/converting-djvu-to-pdf">Converting DJVU to PDF</a>,
where I learned how to convert djvu file.</p>

<p>But if you want to convert something that is a book, converting it directly
using the method in the above link is going to crash your PC, at least freeze
it until you kill the process because pdfbeads is creating very huge
intermediate files. It exceeded 10G before I killed it in my case.</p>

<p>So to deal with the case, I write a script to process djvu file page by page
and merge all the pdf pages in the end. The script could be found on
<a href="https://github.com/shawnLeeZX/daily_tools/blob/master/djvu_2_pdf.sh">here</a>.</p>

<h2 id="remark-on-other-solution">Remark on Other Solution</h2>

<p>Before I dived in all those complicated tools, I tried to some easier
solutions, including online converter and <code>gscan2pdf</code>. They both does not
work. <code>gscan2pdf</code> is capable of converting djvu to pdf with text. But it may
have trouble handling hundreds of pages ones given the error report I got.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open File Using External App in Emacs]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2014/12/08/open-file-using-external-app-in-emacs/"/>
    <updated>2014-12-08T14:29:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2014/12/08/open-file-using-external-app-in-emacs</id>
    <content type="html"><![CDATA[<p>It would be of great convenience to be able to open files in
<code>dired-mode</code> in Emacs using external apps. Here is how to achieve it.</p>

<!-- more -->

<p>```cl
;;; Add command to open file using system programs.
;; ===================================================================
(defun open-in-external-app (&amp;optional file)
  “Open the current file or dired marked files in external app. The app
is chosen from your OS’s preference.”
  (interactive)</p>

<p>(let ( confirm
         (file-list
          (cond
           ((string-equal major-mode “dired-mode”) (dired-get-marked-files))
           ((not file) (list (buffer-file-name)))
           (file (list file))
           )
          )
         )</p>

<pre><code>(setq confirm (if (&lt;= (length file-list) 5)
               t
             (y-or-n-p "Open more than 5 files? ")
             )
      )

(when confirm
  (cond
   ((string-equal system-type "windows-nt")
    (mapc
     (lambda (file-path)
       (w32-shell-execute "open"
                          (replace-regexp-in-string "/" "\\" file-path t t)
                          )
       )
     file-list)
    )
   ((string-equal system-type "darwin")
    (mapc
     (lambda (file-path)
       (shell-command (format "open \"%s\"" file-path))
       )
     file-list)
    )
   ((string-equal system-type "gnu/linux")
    (mapc
     (lambda (file-path)
       (let ((process-connection-type nil))
         (start-process "" nil "xdg-open" file-path)
         )
       )
     file-list)
    )
   )
  )
)   ) ```
</code></pre>

<p>I learned this from
<a href="http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html">here</a>. However,
the code here is more readable and conformed to the programming
convention of Elisp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Markdown With Auto-complete and Math Equation in Emacs]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2014/09/24/writing-markdown-with-autocomplete-and-math-equation-in-emacs/"/>
    <updated>2014-09-24T16:52:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2014/09/24/writing-markdown-with-autocomplete-and-math-equation-in-emacs</id>
    <content type="html"><![CDATA[<p>This post talks about writing markdown under Emacs. Besides the normal,
it mainly talks about how to use auto-complete, <code>ispell-complete-word</code>
after enabling <code>flyspell-mode</code>, and integrate <code>LaTeX-mode</code> with
<code>markdown-mode</code> to ease the writing of math equations.</p>

<!-- more -->

<p>I guess nobody who is using Emacs won’t blogging.  People has spent a
lot of time implementing a major mode for markdown in emacs, as for as
I can see on its
<a href="http://jblevins.org/projects/markdown-mode/">homepage</a>.</p>

<p>Installation of <code>markdown-mode</code> is omitted.</p>

<p>However, auto-complete malfunctions from time to time where tab in the
major mode auto-complete works with does something. In my case, each
time I press tab in markdown mode, the cursor goes back to the start
of the line and it is really annoying. This time I spent time to fix
this once and for all.</p>

<p>The mechanism that how tab works in Emacs is a bit complex. I will not
describe it here since it would be too long and I have not figure it
out completely yet. By analyzing the Emacs configuration forked from
Purcell, I found an utility function written by him(I have refactored
his code a lot so do not expect to find exact matches in exact places).</p>

<p><code>cl
;; Turn off indentation binded with tab.
;; ===============
;; Function to indent the current line.  This function will be called
;; with no arguments.  If it is called somewhere where
;; auto-indentation cannot be done (e.g. inside a string), the
;; function should simply return `noindent'.  Setting this function is
;; all you need to make TAB indent appropriately.  Don't rebind TAB
;; unless you really need to.
;;
;; The function defined here use anomynous function to return the
;; 'noindent to disable the indentation functionality of tab.
(defun sanityinc/never-indent ()
  (set (make-local-variable 'indent-line-function) (lambda () 'noindent)))
</code></p>

<p>The indentation function of tab is determined by the function
<code>indent-line-function</code> on the fly. By returning <code>'noindent</code>, we tell
Emacs does not indent when tab being pressed. See the following:</p>

<p><code>cl
;; Fix tab for autocompletion.
(add-hook 'markdown-mode-hook 'sanityinc/never-indent)
</code></p>

<h3 id="use-ispells-word-completion-instead-of-flyspells">Use ispell’s word completion instead of flyspell’s</h3>
<p>I use flyspell to check the spelling of my markdown files on the fly,
however, when using flyspell, the word correction mapping <code>C-M-i</code> of
<code>ispell</code> minor mode is overshadowed by with the
<code>flyspell-correct-word</code> command. In my preference, it is less powerful
than the original command <code>ispell-complete-word</code>, thus I want it
back.</p>

<p>To fix this, a bit of hacking should be used, since the minor mode
keymap(Google for what keymap means in Emacs) is the inner most keymap
used by Emacs, which means it will be applied first. The way to
override minor mode keymap is to add overriding function to the hook
of this minor mode.</p>

<p>One more problem is that there is not way that we could query the
keymap’s name of the current minor mode. This is where the hacking
coming out. We guess its name. Fortunately, flyspell mode’s keymap name
follows the convention of kepmap naming – it is just called
flyspell-mode-map. See the following:</p>

<p><code>cl
(add-hook 'flyspell-mode-hook
          (lambda ()
            "Use ispell to corrent the word instead of flyspell's."
            (define-key flyspell-mode-map (kbd "C-M-i") 'ispell-complete-word)
          )
)
</code></p>

<p>Now, we have ispell’s binding back.</p>

<h3 id="tips-about-writing-math">Tips about writing math</h3>

<p>I currently use manual switch between <code>LaTeX-mode</code>(from <code>auxtex</code>
package) and <code>markdown-mode</code> to input math symbol. Did not figure out
how to combine those two modes yet. I would be grateful if you let me
know.</p>
]]></content>
  </entry>
  
</feed>
