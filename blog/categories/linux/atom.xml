<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | SHAWN LEE]]></title>
  <link href="http://shawnLeeZX.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://shawnLeeZX.github.io/"/>
  <updated>2016-01-05T12:03:41+08:00</updated>
  <id>http://shawnLeeZX.github.io/</id>
  <author>
    <name><![CDATA[Shawn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Environment Variable Setup of Linux]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2016/01/05/on-environment-variable-setup-of-linux/"/>
    <updated>2016-01-05T11:28:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2016/01/05/on-environment-variable-setup-of-linux</id>
    <content type="html"><![CDATA[<p>I have spent some time figuring out how Linux sets up its environment variables
for login shell, non-login shell to let Emacs inherits environment variables
and make tmux loads <code>.bashrc</code> and note it here.</p>

<!-- more -->

<h2 id="login-shell">Login Shell</h2>

<p>We start by figuring out the boot process.</p>

<p>For text console,</p>

<ol>
  <li>At the end of boot the mother of all processes <code>init</code> is started. init’s
environment, including PATH, is defined in its source code and cannot be
changed at run time.</li>
  <li><code>init</code> runs the start-up scripts from <code>/etc/init.d</code> depending on the run level
set in <code>/etc/inittab</code>. Since init’s environment is very bare, the scripts
define their required environment variables within themselves.</li>
  <li><code>init</code> starts the text login process that waits for the user to log in. When
the user logs in, the login process checks <code>/etc/passwd</code> to see what shell
should be started for this particular user.</li>
  <li>The shell starts and reads its shell-specific configuration files.
    <ol>
      <li>For Bash, it first reads <code>/etc/profile</code> to get values that are defined
for all users. After reading that file, it looks for <code>~/.bash_profile</code>,
<code>~/.bash_login</code>, and <code>~/.profile</code>, in that order, and reads and executes
commands from the first of these files that exists and is readable.</li>
    </ol>
  </li>
</ol>

<p>For graphical UI,</p>

<ol>
  <li>At the end of booting, the mother of all processes – <code>init</code> – is started.</li>
  <li><code>init</code> runs the start-up scripts from <code>/etc/init.d</code> depending on the run
level set in <code>/etc/inittab</code>. Since <code>init</code>’s environment is very bare, the
scripts define required environment variables within themselves.</li>
  <li>Init starts the GDM display manager, which in turn will start the graphical
login.</li>
  <li>When the user successfully logs in, GDM starts xsession, which reads the
file <code>/etc/gdm/Xsession</code> and with it the environment variables for the
user’s session. The default version of the Xsession file first reads
<code>/etc/profile</code> for global settings and then <code>~/.profile</code> to add the user’s
individual settings.</li>
</ol>

<p>The above boot process is the process to set up environment to login shell. So
if any user specific environment that is need for a graphical program, one
could choose to put it in <code>~/.bash_profile</code>, <code>~/.bash_login</code>, and
<code>~/.profile</code>. I chose to put it in <code>.profile</code>. I actually spent time figuring
this out, so Emacs could inherit environment variables the local libraries I
installed.</p>

<p>As for system wide setup, put it in <code>/etc/profile</code>.</p>

<h2 id="non-login-shell">Non-login Shell</h2>

<p>If a shell is needed after login, the setting should go to the non-login
shell’s, <code>.bashrc</code>. For instance, the terminals created by <code>terminal</code>,
<code>terminator</code> and other terminal programs are non-login shells. This is where I
previously put all my configurations in.</p>

<p>The following comes from <code>man bash</code>’s <em>INVOCATION</em> section.</p>

<pre><code>When bash is invoked as an interactive login shell, or as a non-interactive
shell with the `--login` option, it first reads and executes commands from the
file `/etc/profile`, if that file exists.  After reading that file, it looks
for `~/.bash_profile`, `~/.bash_login`, and `~/.profile`, in that order, and
reads and executes commands from the first one that exists and is readable.
The --noprofile option may be used when the shell is started to inhibit this
behavior.

When a login shell exits, bash reads and executes commands from the file
`~/.bash_logout`, if it exists.

When an interactive shell that is not a login shell is started, bash reads and
executes commands from `/etc/bash.bashrc` and `~/.bashrc`, if these files
exist.
</code></pre>

<h2 id="distribution">Distribution</h2>

<p>Each Linux distribution may tweak files mentioned above, for instance, unset
some variables somewhere, so if you set its value before where it is unset,
your setting will not take effect. Normally, if one’s configuration does not
work, consider go through all previous configurations and understand what they
exactly do in such a distribution.</p>

<h2 id="misc">Misc</h2>

<p>If one uses <code>tmux</code>, the terminal multiplexer, note it creates login shells. So
if one wants <code>.bashrc</code>, especially aliases, to work under <code>tmux</code>, remember to
source it after whatever login shell configuration one may use.</p>

<h2 id="reference">Reference</h2>

<ol>
  <li>https://wiki.debian.org/EnvironmentVariables</li>
  <li>https://help.ubuntu.com/community/EnvironmentVariables</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note On Compiling Tensorflow]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/11/13/note-on-compiling-tensorflow/"/>
    <updated>2015-11-13T11:35:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/11/13/note-on-compiling-tensorflow</id>
    <content type="html"><![CDATA[<p>A note on setting library path for cudnn when compiling tensorflow, in case I
forget it next time.</p>

<!-- more -->

<p>Directly providing the library path to cudnn, which has the following directory
structure,</p>

<p><code>bash
include  lib
</code></p>

<p>does not work.</p>

<p>According to the error message, it seems that the configuration tries to find
header file and shared libraries directly under the provided folder, thus this
time, I made another folder specifically for tensorflow — it is not in
<code>LD_LIBRARY</code>, so other programs do not use it — then the compilation works.</p>

<p>Since I just want to make sure I could get through the compilation process to
make sure if in case there are features not provided in the official binary, I
have a way to use it, I settled for now. But since the default folder is just
where CUDA lives, I guess if I made the directory structure of CUDNN the same
as CUDA, which I just need to add a symbol link <code>lib64</code> to <code>lib</code>, the
compilation may still work.</p>

<p>So this is the note.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Linux Laptop Battery]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/09/07/on-linux-laptop-battery/"/>
    <updated>2015-09-07T14:15:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/09/07/on-linux-laptop-battery</id>
    <content type="html"><![CDATA[<p>I would like to note down the how to prolong battery life, in term of both
hours and years.</p>

<p>Roughly, there are three tricks to extend battery time, <code>laptop-mode</code>,
<code>powertop</code> and changing screen lightness, and one trick to extend life,
stopping battery charging according to thresholds. The last trick is only
applicable to Thinkpad.</p>

<!-- more -->

<h2 id="extending-battery-time">Extending Battery Time</h2>

<p>I have three tricks for extending the battery time, <code>laptop_mode</code>, <code>powertop</code>
and setting the lightness of the screen. The exact number is forgotten, but
roughly if the original time of the laptop is around 4 hours, enabling
<code>laptop_mode</code> will get me one extra, <code>powertop</code> two extra and lightness one
extra.</p>

<p>Normally, people are told to use one battery management programs considering
that different programs may conflict, but I found <code>laptop_mode</code> works well with
<code>powertop</code>, a long time ago. So I settled with it.</p>

<h3 id="laptopmode">laptop_mode</h3>

<p><a href="http://www.samwel.tk/laptop_mode/">laptop_mode</a> is about:</p>

<blockquote>
  <p>Laptop mode is a kernel “mode” that allows you to extend the battery life of
your laptop. It does this by making disk write activity “bursty”, so that only
reads of uncached data result in a disk spinup. It causes a significant
improvement in battery life (for usage patterns that allow it).</p>
</blockquote>

<p>There are configuration files for it, but I did not try to use them.</p>

<h3 id="powertop">powertop</h3>

<p><a href="https://01.org/powertop">powertop</a> is from Intel. It could tune a number of
options to save power usage. For details, refer to
<a href="https://wiki.archlinux.org/index.php/Powertop">here</a>. I will only note down
normal usage scenario.</p>

<p>After first installation, we need to run:</p>

<p><code>bash
sudo powertop --calibrate
</code></p>

<p>It will take several minutes to finish, and the screen could be dark for tens
of seconds. So do not panic when this happens. Also, do not touch your laptop
when powertop is calibrating. After this, you could get power consumption in
Watt and estimated remaining time in <code>powertop</code>. If you skip this, <code>powertop</code>
will still work, but not those two information.</p>

<p>Start <code>powertop</code>, in the <code>tunable</code> tab, you could see a number of tunable
options to improve your battery time. Make all the “Bad” to “Good” will save a
lot of power consumption. However, the change is lost after you reboot. To make
it permanent, do the following.</p>

<p>Run,</p>

<p><code>bash
sudo powertop --html
</code></p>

<p>You will get a html version report under current directory. Go to the tunable
page, you could see the command to tune, similar with the following:</p>

<p><code>bash
# Those following are the settings from powertop to save power.
echo '1500' &gt; '/proc/sys/vm/dirty_writeback_centisecs';
echo '0' &gt; '/proc/sys/kernel/nmi_watchdog';
echo 'min_power' &gt; '/sys/class/scsi_host/host1/link_power_management_policy';
echo 'min_power' &gt; '/sys/class/scsi_host/host2/link_power_management_policy';
echo 'min_power' &gt; '/sys/class/scsi_host/host0/link_power_management_policy';
echo 'auto' &gt; '/sys/bus/usb/devices/1-6/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:16.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:02:00.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1f.3/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1f.2/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1f.6/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1f.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1d.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1c.1/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1c.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:14.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:02.0/power/control';
</code></p>

<p>Copy all those lines, or only the ones you want to tune to <code>/etc/rc.local</code>,
then the change will be permanent.</p>

<h3 id="set-default-lightness">Set Default Lightness</h3>

<p>As least for me, no new packages are needed. Just put the following line in
<code>/etc/rc.local</code> is OK. Given the difference in hardwares, the <code>intel_backlight</code>
may be something else.</p>

<p><code>bash
# Set default brightness. The maximum value is 852. The value 350 here is hard tuned.
echo 350 &gt; /sys/class/backlight/intel_backlight/brightness
</code></p>

<h2 id="extending-battery-life">Extending Battery Life</h2>

<p>I am delighted to find out that Thinkpad has such a good support for
Linux. Lenovo has a good mechanism to extend battery life on Windows. It will
stop charging the battery if the battery level has exceeded some threshold,
which would prolong the battery life given the properties of Lithium battery.</p>

<p>Thinkpad still support it if you are using Linux. The solution depends on the
hardware of your Thinkpad. If you are installing on a recent Thinkpad that has
an Ivy Bridge or newer processor (X230, T430, T530, etc.), like me, you could
use a utility named <a href="http://www.thinkwiki.org/wiki/Tpacpi-bat">tpacpi-bat</a>.</p>

<p>If you are using an old Thinkpad, go
<a href="http://www.thinkwiki.org/wiki/Tp_smapi">there</a> for a solution.</p>

<h3 id="install-acpi-call">Install <code>acpi-call</code></h3>

<p>I use Ubuntu 14.04, so the procedure to install <code>tpacpi-bat</code> on Ubuntu will be
described.</p>

<p><code>tpacpi-bat</code> has a <a href="https://launchpad.net/~morgwai/+archive/ubuntu/tpbat">ppa</a>
for Debian based system. Just add the ppa to your source:</p>

<p><code>bash
sudo sudo add-apt-repository PPA_NAME
</code></p>

<p><code>tpacpi-bat</code> depends on <code>acpi-call</code>, which is part of <code>acpi-call-dkms</code>. So we
need to install <code>acpi-call-dkms</code> first. It is also part of the ppa.</p>

<p>The main reason that I write this note is that the package has a bug. This bug
is widely
<a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=762281">discovered</a> almost
one year ago, it is strange why it is not fixed yet. After setting up the ppa,
first try installing <code>acpi-call-dkms</code>.</p>

<p>The installation will fail with message similar with the following:</p>

<p><code>bash
make KERNELRELEASE=3.19.0-26-generic KVERSION=3.19.0-26-generic KDIR=/lib/modules/3.19.0-26-generic/build....(bad exit status: 2)
Error! Bad return status for module build on kernel: 3.19.0-26-generic (x86_64)
Consult /var/lib/dkms/acpi_call/1.1.0/build/make.log for more information.
dpkg: error processing package acpi-call-dkms (--configure):
</code></p>

<p>Have a check at the <code>make.log</code>, the compilation error is:</p>

<p><code>bash
Please don't include &lt;acpi/acpi.h&gt; directly, include &lt;linux/acpi.h&gt; instead
</code></p>

<p>So I go to <code>/var/lib/dkms/acpi_call/1.1.0/source/acpi_call.c</code>, where the
installer unpacks the source. I changed <code>&lt;acpi/acpi.h&gt;</code> to <code>&lt;linux/acpi.h&gt;</code>,
then try the installation(wit the same command) again. Wow, the compilation
passed and the installation is successful.</p>

<h3 id="install-tpacpi-bat">Install <code>tpacpi-bat</code></h3>

<p>This step is easy, just normal apt installation.</p>

<p><code>bash
sudo apt-get install tpacpi-bat
</code></p>

<h3 id="configuration">Configuration</h3>

<p>After installation, now we need to configure the charge threshold of our
battery. The help message of <code>tpacpi-bat</code> does not seem to be very clear for
me. So I will note down how to get and set charging battery thresholds.</p>

<p><code>bash
# tpacpi-bat get start-threshold primary-battery
tpacpi-bat   -g   ST             1
</code></p>

<p>Thinkpad has one primary battery and one secondary battery. 1 stands for
primary battery and 2 stands for secondary battery.</p>

<p>To set the start threshold for starting charging:</p>

<p><code>bash
# tpacpi-bat set start-threshold primary-battery   start-threshold
tpacpi-bat   -s  ST              1                 40 
</code></p>

<p>It means the battery won’t charge if the its battery level is higher than 40.</p>

<p>To make the change permanent, add the following lines in <code>/etc/rc.local</code>.</p>

<p><code>bash
# Primary battery
tpacpi-bat -s ST 1 40 # Start threshold
tpacpi-bat -s SP 1 80 # Stop threshold
# Secondary battery
tpacpi-bat -s ST 2 40
tpacpi-bat -s SP 2 80
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zoom In and Out Gnome Using Mouse]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/07/02/zoom-in-and-out-gnome-using-mouse/"/>
    <updated>2015-07-02T17:18:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/07/02/zoom-in-and-out-gnome-using-mouse</id>
    <content type="html"><![CDATA[<p>Just tried to find a solution to zoom in and out in the GNOME desktop, so that
things could be seen better in case they are too small during presentation.</p>

<!-- more -->

<p>The solution a program called <code>mousewheelzoom</code>, whose source is held at github:
<a href="https://github.com/tobiasquinn/gnome-shell-mousewheel-zoom">gnome-shell-mousewheel-zoom</a>.</p>

<p>The installation instructions could be found there.</p>

<hr />

<p>Besides the solution that works, two solutions that did not work are also going
to noted below.</p>

<h3 id="compiz-setting">Compiz Setting</h3>

<p>At first I tried to changing setting in Compizconfig Settingsmanager, as
suggested in the
<a href="http://askubuntu.com/questions/82398/how-to-zoom-inzoom-out">link</a>. It turns
out that compiz is used by Unity, not GNOME. Since I have changed the desktop
environment, it does not obviously.</p>

<h3 id="gnome-native-solution">GNOME Native solution</h3>

<p>Then GNOME also offers such function directly in their <em>Universal Access</em>,
under <em>Seeing</em> tab, in category Zoom — just type Universal Access in the
Dock. However, it does not work either.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Emacs in 3 Days]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2014/08/18/learning-emacs-in-3-days/"/>
    <updated>2014-08-18T01:04:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2014/08/18/learning-emacs-in-3-days</id>
    <content type="html"><![CDATA[<p>I am learning and setting up emacs environment in the last three
days. Though various blogs, tutorials and manuals have already talking
about this topic, I did not find one direct path that I can follow to
fulfill my need, which is to learn emacs from zero knowledge, well
organize and set up a satisfactory development IDE.  This blog notes
down what I have done.</p>

<!-- more -->

<h2 id="why-learning-emacs">Why Learning Emacs</h2>

<p>I am an experienced vimer. Why bother learning another complicated
editor?</p>

<p>Three days ago, I have no idea about the comparison between vim and
emacs, since vim fulfills all my programming tasks – I have
satisfactory configuration in vim for C/C++, Java, Python, LaTeX,
Markdown, XML, HTML, Octave, Ant, Arduino. You can find my
configuration <a href="https://github.com/shawnLeeZX/.vim">here</a>.</p>

<p>Three days ago, for me, emacs is just an editor that is comparable
with vim, but they cannot win over each other. People stick with emacs
will not get their hand dirdy on vim and vice versa.</p>

<p>There must be something that makes me to spend the next three days
learning emacs.</p>

<p>The story started with a trip on the train. That time, I was reading a
book called <em>Hacker and Painter</em>. If you have not read the book, I
strongly recommend it to you. Although this may not be the most
shinning point in the boo, the author succeeded a startup and beat
their competitor largely by using lisp as their programming language
. Before then, I knew lisp is a programming language for AI, a area
where I dedicated myself to work on. But I cannot find any books or
applications use lisp or talk about lisp. It makes me think lisp is
outdated. Afterall, it was proposed by McCarthy tens of years
ago. Such evidence strongly supported the point the author made in the
book that lisp is a language worth learning.</p>

<p>It remains me of an
<a href="http://www.catb.org/esr/faqs/hacker-howto.html">article</a> about HOW-DO
become a hacker read long time ago. The author writes:</p>

<blockquote>
  <p>LISP is worth learning for a different reason — the profound
enlightenment experience you will have when you finally get it. That
experience will make you a better programmer for the rest of your
days, even if you never actually use LISP itself a lot.</p>
</blockquote>

<p>This <a href="http://www.defmacro.org/ramblings/lisp.html">article</a> gives a
nice explanation on lisp.</p>

<p>Therefore, to find the enlightment mentioned by all the hackers, why
from c, python to ruby, their syntax are more and more similar to lisp and
figure out why lisp is created by McCarthy to be the AI language, I
decided to learn lisp. Since emacs lisp is the only place I knew now
uses lisp a lot, I decided to learn emacs.</p>

<p>That’s enough about the motivation.</p>

<h2 id="comparison-between-vim-and-emacs">Comparison Between Vim and Emacs</h2>
<p>I would’t bother to read such section in other article when I was
using vim exclusively, but I should put some insight into the
advantages and disadvantages the two most powerful editors in the
world.</p>

<p>A simple answer is vim is quicker than any other editor in the world,
including emacs, while more powerful than any other editor in the
world, excluding emacs.</p>

<p>If you push typing speed to the extreme speed, vim, a multi-modal
editor is definitely quicker than emacs. But the coming of
<a href="https://gitorious.org/evil/pages/Home">evil</a>, a plugin to simulate
vim behavior in emacs solves this problem. Actually I am using
evil-mode under emacs. So this evidence does not support the argument.</p>

<p>The real problem is that emacs loads really slow. I have 25M
configuration file for vim, which it only takes less than one second
to load while emacs will normally takes 3-10 seconds now, no to take
into account that I am just starting using emacs and I will add more
extensions now and then recently. Such a long loading time makes emacs
not suitable for small task. For example, I won’t edit config files
under emacs – I won’t even take 3 seconds to edit the file and close
the file using vim.</p>

<p>However, any serious programming task is not a small task. This is
where emacs stands out, since modern computer are more and more
advanced, which makes the huge volume of emacs not matter.</p>

<p>For non-trivial task, emacs surpasses vim. Emacs has better
autocomplete, syntax highlighting. Emacs is more robust. I will skip
the detail for now.</p>

<h2 id="learning-emacs-from-zero-in-3-days">Learning Emacs From Zero in 3 Days</h2>

<p>I will not pretend smart. I can make emacs work well in three days is
because I spent most of the three days learning and configuring emacs
and I know what I am looking for since I have similar functionalities
in vim. Learning emacs and vim is about learning how compiler find c
header files, auto pairing of parenthesis and more are done. It is
about learning how the underlying is working. That’s where the time
is spent.</p>

<p>The following are step-by-step instructions about how to learn emacs
with zero knowledge about emacs. Let’s get started.</p>

<h3 id="learning-emacs-basics">Learning Emacs Basics</h3>

<ul>
  <li>Install emacs.</li>
  <li>Open emacs.</li>
  <li>Learning emacs basics.
    <ul>
      <li>Press <code>&lt;C-h&gt;t</code> to invoke the learning-by-doing tutorial. This
tutorial teaches you basics about emacs.</li>
    </ul>
  </li>
  <li>Learning how to use the help system.
    <ul>
      <li>Press <code>&lt;C-h&gt;r</code> to open emacs manual in info mode.</li>
      <li>Press <code>d</code> to go to the root of info help system.</li>
      <li>Find a menu item called <code>Info</code>, which is nearly at the bottom of the
manual.</li>
      <li>Learning how to use info system in the manual.</li>
      <li>Now you are capable to basic command of emacs and info.</li>
      <li>Press <code>&lt;C-h&gt;&lt;C-h&gt;</code> and check some variables, functions and command
you do not know what they are for to practice using the help
system of emacs.</li>
    </ul>
  </li>
  <li>Learning how to customize emacs.
    <ul>
      <li>Go to the root of the info manual again.</li>
      <li>Find a section called <code>Emacs Lisp Intro</code>.</li>
      <li>Enter it.</li>
      <li>Find a section called <code>Emacs Initialization</code>. It will tell you the
basics about customizing emacs.</li>
    </ul>
  </li>
  <li>Now you have finished learning basics of emacs and are capable of
building your customized emacs. There are two manual at the root of
the info manual, <code>Emacs Lisp Intro</code> and <code>Elisp</code>. We have used the
former. The latter is emacs lisp manual. Remember to refer to it to
learn about lisp when you are customizing your emacs.</li>
</ul>

<h3 id="start-with-professionals-emacsd">Start With Professional’s Emacs.d</h3>

<p>To get started, you’d better begin by mimicking others. I started by
forking purcell’s <a href="https://github.com/purcell/emacs.d">emacs.d</a>. There are
others as well, such as
<a href="http://eschulte.github.io/emacs24-starter-kit/">Emacs24 Starter Kit</a>. You
are free to choose yours. But one thing is worth pointing out is that
purcell’s emacs.d really gives powerful starting.</p>

<p>If you are also a vimmer before, I could also fork my
<a href="https://github.com/shawnLeeZX/emacs.d">emacs.d</a>.</p>

<p>To keep up-to-date with the original repo, you could add it as a remote repo and
pull from it from time to time.</p>

<p><code>bash
git remote add firstguy git://github.com/firstguy/repo.git
</code></p>

<p>Read its sources to figure out how the extensions are organized and
know how to add your own customization. In the following I will
describe the changes I made up to now.</p>

<h4 id="package-management">Package Management</h4>
<p>Emacs has better package management mechanism for extensions than
vim. I use <code>package.el</code>. See this <a href="http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/">blog</a>.</p>

<h4 id="copy-paste">Copy Paste</h4>
<p>I use emacs in a termial, and by default inter-program copy and paste
does not work.</p>

<p>This
<a href="http://shreevatsa.wordpress.com/2006/10/22/emacs-copypaste-and-x/">blog</a>
talks about how copy and paste works in emacs, or more generally under linux.</p>

<p>To enable inter-program copy and paste, see this <a href="http://hugoheden.wordpress.com/2009/03/08/copypaste-with-emacs-in-terminal/">blog</a>.</p>

<h4 id="swap-ctrl-and-caps-lock">Swap Ctrl and Caps Lock</h4>
<p>Make <code>&lt;Caps Lock&gt;</code> a <code>&lt;Ctrl&gt;</code> key to speed up typing. See <a href="http://www.emacswiki.org/emacs/MovingTheCtrlKey">here</a>.</p>

<h4 id="manage-extra-with-git">Manage Extra with git</h4>
<p>Occasionally, you cannot find extensions you want in the package
management system. To manage the extensions you download, use git. And
to keep those extensions in their git repo will ease the process of
updating. To make this work, some knowledge of git submodule will be
helpful. See this <a href="http://longair.net/blog/2010/06/02/git-submodules-explained/">post</a>.</p>

<h4 id="beginning-by-setting-up-development-environment-for-cc">Beginning By Setting Up Development Environment for C/C++</h4>

<p>Below is three video on Youtude.</p>

<ul>
  <li><a href="https://www.youtube.com/watch?v=HTUE03LnaXA">Emacs as a C/C++ Editor/IDE (Part I): auto-complete, yasnippet, and autoplete</a></li>
  <li><a href="https://www.youtube.com/watch?v=r_HW0EB67eY">Emacs as a C/C++ Editor/IDE (Part 2): iedit, flymake-google-cpplint, google-c-style</a></li>
  <li><a href="https://www.youtube.com/watch?v=Ib914gNr0ys">Emacs as a C/C++ Editor/IDE (Part 3): Installing CEDET mode for true intellisense</a></li>
</ul>

<h4 id="evil">Evil</h4>

<p>If you are also a vimmer try <a href="http://www.emacswiki.org/emacs/Evil">evil</a>.</p>

<p>If you want to speed up your development, also try it!</p>

<p>If you are using emacs under screen or tmux, change the timeout to
make evil works smoothly.</p>

<p>For tmux, change <code>.tmux.conf</code>:</p>

<p><code>bash
tmux set -sg escape-time 0
</code>
For screen, change <code>.screenrc</code></p>

<p><code>bash
maptimeout 5
</code></p>

<h4 id="misc">Misc</h4>

<ul>
  <li>Generate tags for emacs using <code>-e</code> option using ctags.</li>
  <li>Shell in emacs. See this <a href="http://www.masteringemacs.org/articles/2010/11/01/running-shells-in-emacs-overview/">post</a>.</li>
  <li>I recommend a product called
<a href="https://www.teambition.com/">teambition</a> to replace the org-mode to
GET THINGS DONE. Its has a web interface and app on smartphone.</li>
  <li>Lastly, you can find my <code>emacs.d</code> <a href="https://github.com/shawnLeeZX/emacs.d">here</a>.</li>
</ul>

]]></content>
  </entry>
  
</feed>
