<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | SHAWN LEE]]></title>
  <link href="http://shawnLeeZX.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://shawnLeeZX.github.io/"/>
  <updated>2016-01-09T10:26:01+08:00</updated>
  <id>http://shawnLeeZX.github.io/</id>
  <author>
    <name><![CDATA[Shawn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up Multi-Monitor on Gnome Ubuntu 14.04 with NVIDIA Card]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2016/01/06/setting-up-multi-monitor-on-gnome-ubuntu-14-dot-04-with-nvidia-card/"/>
    <updated>2016-01-06T08:16:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2016/01/06/setting-up-multi-monitor-on-gnome-ubuntu-14-dot-04-with-nvidia-card</id>
    <content type="html"><![CDATA[<p>I got an old monitor and spent some time tweaking the dual monitor setting of
my PC in the office. Here I note down</p>

<ol>
  <li>a tweak to make multiple monitor in Gnome functions better</li>
  <li>a hack to let X Windows remember the monitor layout</li>
  <li>and a short comparison between Gnome 3 and KDE Plasma 4.</li>
</ol>

<!-- more -->

<h2 id="dual-monitor-on-gnome">Dual Monitor on Gnome</h2>

<p>I uses <a href="https://www.gnome.org/">Gnome</a> as my desktop environment ever since the
time I started using Linux. So naturally, the desktop I tried this time to
manage multi-monitor support is Gnome. By default, the dual monitor worked
pretty OK. The only one thing that may need a tweak is: by default, Gnome(my
version is 3.9.90), only supports workspace in primary monitor, so when you
switch back and forth between different workspace, the secondary monitor stays
fixed on whatever it is on. This kind of makes the extra monitor many times
less useful. To make the secondary monitor attach to current workspace, so it
moves when you switch workspaces, you need to configure Gnome a little bit, by
the following command</p>

<p><code>bash
gsettings set org.gnome.shell.overrides workspaces-only-on-primary false
</code></p>

<p>One drawback of making such a change is <code>guake</code> will stay on the secondary
window forever. Did not get the time to look into the source code to know why
:(.</p>

<p><em>Updated on Jan 9, 2016.</em></p>

<p>It is weird. <code>guake</code> functions normally now, after a reboot. This is probably
not the first time I reboot. I guess it is the package updates that fixed
something.</p>

<h2 id="physical-layout-of-monitors">Physical Layout of Monitors</h2>

<p>I do not know how much it depends on operating system, drivers and
hardware. The <code>display</code>(the GUI one of Gnome) or <code>nvidia-settings</code>(the CLI one
comes with proprietary driver) forgets the monitor layout after reboot, such as
<code>DVI-I-1</code> should be on the left of <code>DVI-D-0</code>, even if I wrote it in the
<code>xorg.conf</code>.</p>

<p>Though finally I switched the monitors physically, for some other reason, and
made peace with the forgetful display manager, I struggled some time to figure
out how to make the layout right.</p>

<p>The solution I used is to use <code>xrandr</code> after the GUI session has set up by
adding a script containing the following line in the startup application of
Gnome(there is a GUI program called <code>Startup Application</code>, though I do not know
what its CLI version is).</p>

<p><code>
xrandr --output DVI-I-1 --mode 1920x1080 --right-of DVI-D-0
</code></p>

<p>I also have tried to add the above line in <code>.profile</code>, but it seems the layout
setting is decided after <code>.profile</code> is loaded, so it did not work.</p>

<h2 id="a-peak-at-kde">A Peak at KDE</h2>

<p>At the first time I tried to set <code>workspaces-only-on-primary</code> to <code>false</code>, it
did not have any effect, and first all workspaces other than the first one
started to get severe artifact when moving windows around, then even the first
one started to get artifacts. It made the desktop unusable.</p>

<p>After trying to search for an solution in Google for a while, I learned there
seems Gnome do not have any multi-monitor support at all, at least they do not
consider this a feature to be proud of at their website for Gnome 3. So I think
maybe Gnome does not work for Gnome.</p>

<p>Then some video introducing Plasma let me pay some attention to KDE
desktop. The modern design of KDE Plasma 5.5 really impressed me, though in
retrospect I was dazzled by Gnome 3’s new design at the first I saw it. It is
just the case that I have been used to Gnome 3 for such a long time and do not
feel its design at all now.</p>

<p>I installed Plasma from source by</p>

<p><code>bash
sudo apt-get install kubuntu-desktop
</code></p>

<p>This is the first time I started to feel Ubuntu 14.04 is getting old. It only
has Plasma 4.14(the minor version may not be right, but it is 4).</p>

<p>After tinkering it a little bit, though it must be the case I did not get
myself familiar with it, I have the first impression as following:</p>

<ol>
  <li>It seems to have many widgets, which is better than Gnome, whose desktop
widget feels like antiques.</li>
</ol>

<p>Besides that, I did not find an obvious solution to</p>

<ol>
  <li>multiple workspaces, which is available by default in Gnome</li>
  <li>the dash application runner(I am not sure its exact name, just you press the
<code>super</code> or <code>win</code> key in you desktop and it shows up). I tried to install
a app called <code>homerun</code>, but it just adds too much icons in the desktop and
creates too much clutters.</li>
  <li>Obvious, <code>guake</code> does not work here anymore.</li>
</ol>

<p>The above three are really killer app, and cannot not be lacking.</p>

<p>So the first impression is KDE is for the GUI users.</p>

<ol>
  <li>It has a good file manager called <code>Dolphin</code>, whose functionality is better
than <code>Nautilus</code>. But I almost do not use GUI file management since I do it
all in CLI.</li>
  <li>A similar application launcher of dash of Gnome is <code>Krunner</code>. But like
Unity, it not only search for applications, but also search for files, any
opened applications etc, which creates much clutter, though this is a
desktop user wants.</li>
  <li>Again, no easy drop-down terminal like <code>guake</code>.</li>
  <li>It adds too much clutter that may not be useful, compared with a clean wall
paper of Gnome. I think Plasma 5.5 tries to fix this, but I did not have the
chance to try.</li>
</ol>

<p>As having been said, it must be the case I am not familiar with a new desktop
environment, but I guess I will settle with it, because after I was little
frustrated with the KDE desktop, I tried to switch back to Gnome. Suddenly,
everything started to work well! Maybe it is because I installed a lot of
libraries when I was installing KDE, which fixed some problems. But now I feel
current setting, the one I mentioned at the first section of this note,
awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Environment Variable Setup of Linux]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2016/01/05/on-environment-variable-setup-of-linux/"/>
    <updated>2016-01-05T11:28:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2016/01/05/on-environment-variable-setup-of-linux</id>
    <content type="html"><![CDATA[<p>I have spent some time figuring out how Linux sets up its environment variables
for login shell, non-login shell to let Emacs inherits environment variables
and make tmux loads <code>.bashrc</code> and note it here.</p>

<!-- more -->

<h2 id="login-shell">Login Shell</h2>

<p>We start by figuring out the boot process.</p>

<p>For text console,</p>

<ol>
  <li>At the end of boot the mother of all processes <code>init</code> is started. init’s
environment, including PATH, is defined in its source code and cannot be
changed at run time.</li>
  <li><code>init</code> runs the start-up scripts from <code>/etc/init.d</code> depending on the run level
set in <code>/etc/inittab</code>. Since init’s environment is very bare, the scripts
define their required environment variables within themselves.</li>
  <li><code>init</code> starts the text login process that waits for the user to log in. When
the user logs in, the login process checks <code>/etc/passwd</code> to see what shell
should be started for this particular user.</li>
  <li>The shell starts and reads its shell-specific configuration files.
    <ol>
      <li>For Bash, it first reads <code>/etc/profile</code> to get values that are defined
for all users. After reading that file, it looks for <code>~/.bash_profile</code>,
<code>~/.bash_login</code>, and <code>~/.profile</code>, in that order, and reads and executes
commands from the first of these files that exists and is readable.</li>
    </ol>
  </li>
</ol>

<p>For graphical UI,</p>

<ol>
  <li>At the end of booting, the mother of all processes – <code>init</code> – is started.</li>
  <li><code>init</code> runs the start-up scripts from <code>/etc/init.d</code> depending on the run
level set in <code>/etc/inittab</code>. Since <code>init</code>’s environment is very bare, the
scripts define required environment variables within themselves.</li>
  <li>Init starts the GDM display manager, which in turn will start the graphical
login.</li>
  <li>When the user successfully logs in, GDM starts xsession, which reads the
file <code>/etc/gdm/Xsession</code> and with it the environment variables for the
user’s session. The default version of the Xsession file first reads
<code>/etc/profile</code> for global settings and then <code>~/.profile</code> to add the user’s
individual settings.</li>
</ol>

<p>The above boot process is the process to set up environment to login shell. So
if any user specific environment that is need for a graphical program, one
could choose to put it in <code>~/.bash_profile</code>, <code>~/.bash_login</code>, and
<code>~/.profile</code>. I chose to put it in <code>.profile</code>. I actually spent time figuring
this out, so Emacs could inherit environment variables the local libraries I
installed.</p>

<p>As for system wide setup, put it in <code>/etc/profile</code>.</p>

<h2 id="non-login-shell">Non-login Shell</h2>

<p>If a shell is needed after login, the setting should go to the non-login
shell’s, <code>.bashrc</code>. For instance, the terminals created by <code>terminal</code>,
<code>terminator</code> and other terminal programs are non-login shells. This is where I
previously put all my configurations in.</p>

<p>The following comes from <code>man bash</code>’s <em>INVOCATION</em> section.</p>

<pre><code>When bash is invoked as an interactive login shell, or as a non-interactive
shell with the `--login` option, it first reads and executes commands from the
file `/etc/profile`, if that file exists.  After reading that file, it looks
for `~/.bash_profile`, `~/.bash_login`, and `~/.profile`, in that order, and
reads and executes commands from the first one that exists and is readable.
The --noprofile option may be used when the shell is started to inhibit this
behavior.

When a login shell exits, bash reads and executes commands from the file
`~/.bash_logout`, if it exists.

When an interactive shell that is not a login shell is started, bash reads and
executes commands from `/etc/bash.bashrc` and `~/.bashrc`, if these files
exist.
</code></pre>

<h2 id="distribution">Distribution</h2>

<p>Each Linux distribution may tweak files mentioned above, for instance, unset
some variables somewhere, so if you set its value before where it is unset,
your setting will not take effect. Normally, if one’s configuration does not
work, consider go through all previous configurations and understand what they
exactly do in such a distribution.</p>

<h2 id="misc">Misc</h2>

<p>If one uses <code>tmux</code>, the terminal multiplexer, note it creates login shells. So
if one wants <code>.bashrc</code>, especially aliases, to work under <code>tmux</code>, remember to
source it after whatever login shell configuration one may use.</p>

<h2 id="reference">Reference</h2>

<ol>
  <li>https://wiki.debian.org/EnvironmentVariables</li>
  <li>https://help.ubuntu.com/community/EnvironmentVariables</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note On Compiling Tensorflow]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/11/13/note-on-compiling-tensorflow/"/>
    <updated>2015-11-13T11:35:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/11/13/note-on-compiling-tensorflow</id>
    <content type="html"><![CDATA[<p>A note on setting library path for cudnn when compiling tensorflow, in case I
forget it next time.</p>

<!-- more -->

<p>Directly providing the library path to cudnn, which has the following directory
structure,</p>

<p><code>bash
include  lib
</code></p>

<p>does not work.</p>

<p>According to the error message, it seems that the configuration tries to find
header file and shared libraries directly under the provided folder, thus this
time, I made another folder specifically for tensorflow — it is not in
<code>LD_LIBRARY</code>, so other programs do not use it — then the compilation works.</p>

<p>Since I just want to make sure I could get through the compilation process to
make sure if in case there are features not provided in the official binary, I
have a way to use it, I settled for now. But since the default folder is just
where CUDA lives, I guess if I made the directory structure of CUDNN the same
as CUDA, which I just need to add a symbol link <code>lib64</code> to <code>lib</code>, the
compilation may still work.</p>

<p>So this is the note.</p>

<hr />

<p>Updated on Jan 7, 2016</p>

<p>Adding a symbol link <code>lib64</code> to <code>lib</code> under where cudnn lives does work. The
folder structure is the one mentioned above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Linux Laptop Battery]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/09/07/on-linux-laptop-battery/"/>
    <updated>2015-09-07T14:15:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/09/07/on-linux-laptop-battery</id>
    <content type="html"><![CDATA[<p>I would like to note down the how to prolong battery life, in term of both
hours and years.</p>

<p>Roughly, there are three tricks to extend battery time, <code>laptop-mode</code>,
<code>powertop</code> and changing screen lightness, and one trick to extend life,
stopping battery charging according to thresholds. The last trick is only
applicable to Thinkpad.</p>

<!-- more -->

<h2 id="extending-battery-time">Extending Battery Time</h2>

<p>I have three tricks for extending the battery time, <code>laptop_mode</code>, <code>powertop</code>
and setting the lightness of the screen. The exact number is forgotten, but
roughly if the original time of the laptop is around 4 hours, enabling
<code>laptop_mode</code> will get me one extra, <code>powertop</code> two extra and lightness one
extra.</p>

<p>Normally, people are told to use one battery management programs considering
that different programs may conflict, but I found <code>laptop_mode</code> works well with
<code>powertop</code>, a long time ago. So I settled with it.</p>

<h3 id="laptopmode">laptop_mode</h3>

<p><a href="http://www.samwel.tk/laptop_mode/">laptop_mode</a> is about:</p>

<blockquote>
  <p>Laptop mode is a kernel “mode” that allows you to extend the battery life of
your laptop. It does this by making disk write activity “bursty”, so that only
reads of uncached data result in a disk spinup. It causes a significant
improvement in battery life (for usage patterns that allow it).</p>
</blockquote>

<p>There are configuration files for it, but I did not try to use them.</p>

<h3 id="powertop">powertop</h3>

<p><a href="https://01.org/powertop">powertop</a> is from Intel. It could tune a number of
options to save power usage. For details, refer to
<a href="https://wiki.archlinux.org/index.php/Powertop">here</a>. I will only note down
normal usage scenario.</p>

<p>After first installation, we need to run:</p>

<p><code>bash
sudo powertop --calibrate
</code></p>

<p>It will take several minutes to finish, and the screen could be dark for tens
of seconds. So do not panic when this happens. Also, do not touch your laptop
when powertop is calibrating. After this, you could get power consumption in
Watt and estimated remaining time in <code>powertop</code>. If you skip this, <code>powertop</code>
will still work, but not those two information.</p>

<p>Start <code>powertop</code>, in the <code>tunable</code> tab, you could see a number of tunable
options to improve your battery time. Make all the “Bad” to “Good” will save a
lot of power consumption. However, the change is lost after you reboot. To make
it permanent, do the following.</p>

<p>Run,</p>

<p><code>bash
sudo powertop --html
</code></p>

<p>You will get a html version report under current directory. Go to the tunable
page, you could see the command to tune, similar with the following:</p>

<p><code>bash
# Those following are the settings from powertop to save power.
echo '1500' &gt; '/proc/sys/vm/dirty_writeback_centisecs';
echo '0' &gt; '/proc/sys/kernel/nmi_watchdog';
echo 'min_power' &gt; '/sys/class/scsi_host/host1/link_power_management_policy';
echo 'min_power' &gt; '/sys/class/scsi_host/host2/link_power_management_policy';
echo 'min_power' &gt; '/sys/class/scsi_host/host0/link_power_management_policy';
echo 'auto' &gt; '/sys/bus/usb/devices/1-6/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:16.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:02:00.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1f.3/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1f.2/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1f.6/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1f.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1d.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1c.1/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:1c.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:14.0/power/control';
echo 'auto' &gt; '/sys/bus/pci/devices/0000:00:02.0/power/control';
</code></p>

<p>Copy all those lines, or only the ones you want to tune to <code>/etc/rc.local</code>,
then the change will be permanent.</p>

<h3 id="set-default-lightness">Set Default Lightness</h3>

<p>As least for me, no new packages are needed. Just put the following line in
<code>/etc/rc.local</code> is OK. Given the difference in hardwares, the <code>intel_backlight</code>
may be something else.</p>

<p><code>bash
# Set default brightness. The maximum value is 852. The value 350 here is hard tuned.
echo 350 &gt; /sys/class/backlight/intel_backlight/brightness
</code></p>

<h2 id="extending-battery-life">Extending Battery Life</h2>

<p>I am delighted to find out that Thinkpad has such a good support for
Linux. Lenovo has a good mechanism to extend battery life on Windows. It will
stop charging the battery if the battery level has exceeded some threshold,
which would prolong the battery life given the properties of Lithium battery.</p>

<p>Thinkpad still support it if you are using Linux. The solution depends on the
hardware of your Thinkpad. If you are installing on a recent Thinkpad that has
an Ivy Bridge or newer processor (X230, T430, T530, etc.), like me, you could
use a utility named <a href="http://www.thinkwiki.org/wiki/Tpacpi-bat">tpacpi-bat</a>.</p>

<p>If you are using an old Thinkpad, go
<a href="http://www.thinkwiki.org/wiki/Tp_smapi">there</a> for a solution.</p>

<h3 id="install-acpi-call">Install <code>acpi-call</code></h3>

<p>I use Ubuntu 14.04, so the procedure to install <code>tpacpi-bat</code> on Ubuntu will be
described.</p>

<p><code>tpacpi-bat</code> has a <a href="https://launchpad.net/~morgwai/+archive/ubuntu/tpbat">ppa</a>
for Debian based system. Just add the ppa to your source:</p>

<p><code>bash
sudo sudo add-apt-repository PPA_NAME
</code></p>

<p><code>tpacpi-bat</code> depends on <code>acpi-call</code>, which is part of <code>acpi-call-dkms</code>. So we
need to install <code>acpi-call-dkms</code> first. It is also part of the ppa.</p>

<p>The main reason that I write this note is that the package has a bug. This bug
is widely
<a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=762281">discovered</a> almost
one year ago, it is strange why it is not fixed yet. After setting up the ppa,
first try installing <code>acpi-call-dkms</code>.</p>

<p>The installation will fail with message similar with the following:</p>

<p><code>bash
make KERNELRELEASE=3.19.0-26-generic KVERSION=3.19.0-26-generic KDIR=/lib/modules/3.19.0-26-generic/build....(bad exit status: 2)
Error! Bad return status for module build on kernel: 3.19.0-26-generic (x86_64)
Consult /var/lib/dkms/acpi_call/1.1.0/build/make.log for more information.
dpkg: error processing package acpi-call-dkms (--configure):
</code></p>

<p>Have a check at the <code>make.log</code>, the compilation error is:</p>

<p><code>bash
Please don't include &lt;acpi/acpi.h&gt; directly, include &lt;linux/acpi.h&gt; instead
</code></p>

<p>So I go to <code>/var/lib/dkms/acpi_call/1.1.0/source/acpi_call.c</code>, where the
installer unpacks the source. I changed <code>&lt;acpi/acpi.h&gt;</code> to <code>&lt;linux/acpi.h&gt;</code>,
then try the installation(wit the same command) again. Wow, the compilation
passed and the installation is successful.</p>

<h3 id="install-tpacpi-bat">Install <code>tpacpi-bat</code></h3>

<p>This step is easy, just normal apt installation.</p>

<p><code>bash
sudo apt-get install tpacpi-bat
</code></p>

<h3 id="configuration">Configuration</h3>

<p>After installation, now we need to configure the charge threshold of our
battery. The help message of <code>tpacpi-bat</code> does not seem to be very clear for
me. So I will note down how to get and set charging battery thresholds.</p>

<p><code>bash
# tpacpi-bat get start-threshold primary-battery
tpacpi-bat   -g   ST             1
</code></p>

<p>Thinkpad has one primary battery and one secondary battery. 1 stands for
primary battery and 2 stands for secondary battery.</p>

<p>To set the start threshold for starting charging:</p>

<p><code>bash
# tpacpi-bat set start-threshold primary-battery   start-threshold
tpacpi-bat   -s  ST              1                 40 
</code></p>

<p>It means the battery won’t charge if the its battery level is higher than 40.</p>

<p>To make the change permanent, add the following lines in <code>/etc/rc.local</code>.</p>

<p><code>bash
# Primary battery
tpacpi-bat -s ST 1 40 # Start threshold
tpacpi-bat -s SP 1 80 # Stop threshold
# Secondary battery
tpacpi-bat -s ST 2 40
tpacpi-bat -s SP 2 80
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zoom In and Out Gnome Using Mouse]]></title>
    <link href="http://shawnLeeZX.github.io/blog/2015/07/02/zoom-in-and-out-gnome-using-mouse/"/>
    <updated>2015-07-02T17:18:00+08:00</updated>
    <id>http://shawnLeeZX.github.io/blog/2015/07/02/zoom-in-and-out-gnome-using-mouse</id>
    <content type="html"><![CDATA[<p>Just tried to find a solution to zoom in and out in the GNOME desktop, so that
things could be seen better in case they are too small during presentation.</p>

<!-- more -->

<p>The solution a program called <code>mousewheelzoom</code>, whose source is held at github:
<a href="https://github.com/tobiasquinn/gnome-shell-mousewheel-zoom">gnome-shell-mousewheel-zoom</a>.</p>

<p>The installation instructions could be found there.</p>

<hr />

<p>Besides the solution that works, two solutions that did not work are also going
to noted below.</p>

<h3 id="compiz-setting">Compiz Setting</h3>

<p>At first I tried to changing setting in Compizconfig Settingsmanager, as
suggested in the
<a href="http://askubuntu.com/questions/82398/how-to-zoom-inzoom-out">link</a>. It turns
out that compiz is used by Unity, not GNOME. Since I have changed the desktop
environment, it does not obviously.</p>

<h3 id="gnome-native-solution">GNOME Native solution</h3>

<p>Then GNOME also offers such function directly in their <em>Universal Access</em>,
under <em>Seeing</em> tab, in category Zoom — just type Universal Access in the
Dock. However, it does not work either.</p>
]]></content>
  </entry>
  
</feed>
